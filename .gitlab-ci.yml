  stages:
    - prepare
    - build
    - deploy

  variables:
    DOCKER_COMPOSE_FILE: "docker-compose.yaml"
    FRONTEND_SERVICE: "frontend"
    BACKEND_SERVICE: "backend"

  generate_env_files:
    stage: prepare
    tags:
      - shell
    script:
      - touch .env .env.dev && chmod 600 .env .env.dev
    artifacts:
      paths:
        - .env
        - .env.dev
      expire_in: never

  # Build Frontend Only If Changed
  build_frontend:
    stage: build
    rules:
      - if: '$CI_COMMIT_REF_NAME == "dev"'
        variables:
          DOCKER_COMPOSE_FILE: "docker-compose.dev.yaml"
          FRONTEND_SERVICE: "frontend-dev"
      - if: '$CI_COMMIT_REF_NAME == "main"'
        variables:
          DOCKER_COMPOSE_FILE: "docker-compose.yaml"
          FRONTEND_SERVICE: "frontend"
      - changes:
          - frontend/**
    tags:
      - shell
    script:
      - docker-compose -f $DOCKER_COMPOSE_FILE build $FRONTEND_SERVICE


  # Build Backend Only If Changed
  build_backend:
    stage: build
    rules:
      - if: '$CI_COMMIT_REF_NAME == "dev"'
        variables:
          DOCKER_COMPOSE_FILE: "docker-compose.dev.yaml"
          BACKEND_SERVICE: "backend-dev"
      - if: '$CI_COMMIT_REF_NAME == "main"'
        variables:
          DOCKER_COMPOSE_FILE: "docker-compose.yaml"
          BACKEND_SERVICE: "backend"
      - changes:
          - backend/**
    tags:
      - shell
    script:
      - docker-compose -f $DOCKER_COMPOSE_FILE build $BACKEND_SERVICE


  # Deploy to Development
  deploy_dev:
    stage: deploy
    only:
      - dev
    environment:
      name: development
    tags:
      - shell
    before_script:
      - cp ${ENV_DEV} .env.dev
    script:
      - docker-compose -f docker-compose.dev.yaml up -d --no-build

  # Deploy to Production
  deploy_prod:
    stage: deploy
    only:
      - main
    environment:
      name: production
    tags:
      - shell
    before_script:
      - cp ${ENV_PROD} .env
    script:
      - docker-compose -f docker-compose.yaml up -d --no-build
      